// Generated by GPT-4, modified.
export async function getKeyFromPBKDF2(passphrase: string, salt: string, iterations = 100000) {
  const encoder = new TextEncoder()
  const keyMaterial = await crypto.subtle.importKey(
    "raw",
    encoder.encode(passphrase),
    { name: "PBKDF2" },
    false,
    ["deriveKey"]
  )

  return await crypto.subtle.deriveKey(
    {
      name: "PBKDF2",
      salt: encoder.encode(salt),
      iterations: iterations,
      hash: "SHA-256"
    },
    keyMaterial,
    { name: "AES-GCM", length: 256 },
    true,
    ["encrypt", "decrypt"]
  )
}

export async function encryptData(plainText: string, key: CryptoKey) {
  const encoder = new TextEncoder()
  const data = encoder.encode(plainText)
  const iv = new ArrayBuffer(12)

  const encrypted = await crypto.subtle.encrypt(
    {
      name: "AES-GCM",
      iv,
    },
    key,
    data
  )

  // return `${arrayBufferToBase64(encrypted)}:${arrayBufferToBase64(iv)}`
  return arrayBufferToBase64(encrypted)
}

export async function decryptData(cipher: string, key: CryptoKey) {
  const encrypted = base64ToUint8Array(cipher).buffer
  const iv = new ArrayBuffer(12) // Initialization vector

  const decrypted = await crypto.subtle.decrypt(
    {
      name: "AES-GCM",
      iv,
    },
    key,
    encrypted
  )

  const decoder = new TextDecoder()
  return decoder.decode(decrypted)
}

function arrayBufferToBase64(buffer: ArrayBuffer | Uint8Array) {
  let binary = ''
  let bytes = new Uint8Array(buffer)
  let len = bytes.byteLength

  for (let i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i])
  }

  return btoa(binary)
}

function base64ToUint8Array(base64: string) {
  let binary_string = atob(base64)
  let len = binary_string.length
  let bytes = new Uint8Array(len)

  for (let i = 0; i < len; i++) {
    bytes[i] = binary_string.charCodeAt(i)
  }

  return bytes
}

export function generateSalt(length = 16) {
  const array = new Uint8Array(length)
  crypto.getRandomValues(array)
  return arrayBufferToBase64(array)
}
